plugins {
    id "fabric-loom" version "1.5.+"
}

loom {
    // "runs" isn't required, but when we do need it then it can be useful
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("../run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("../run")
        }
    }
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
//    classifier null
}

configurations {
    // The addModJar basically embeds the mod to the built jar
    addModJar
    include.extendsFrom addModJar
    modImplementation.extendsFrom addModJar
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        // Mojmap mappings
        officialMojangMappings()
        // Parchment mappings (it adds parameter mappings & javadoc)
        parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
    }
    // Fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Fabric API
    addModJar(fabricApi.module("fabric-api-base", rootProject.fabric_api_version))
    addModJar(fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api_version))
}


task deleteResources(type: Delete) {
    delete file("build/resources/main")
}

processResources {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonLoaderResources)
}

runClient {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonLoaderResources)
    jvmArgs([ "-XX:-OmitStackTraceInFastThrow", minecraftMemoryJavaArg ])
    finalizedBy(deleteResources)
}

//jar {
//    classifier "dev"
//}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

//    def fabricLikeSources = project(":fabricLike").sourcesJar
//    dependsOn fabricLikeSources
//    from fabricLikeSources.archiveFile.map { zipTree(it) }
}

//components.java {
//    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
//        skip()
//    }
//}
